#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail

# Author: Philipp Moers <soziflip@gmail.com>
#
# backup
# A script to create backups using rsync.
#
# For certain directories this script creates incremental backups with hardlinks (think snapshots
# that refer to older snapshots). This is efficient both in terms of backup runtime performance and
# disk space usage.
# Note that backups won't be incremental on NTFS (doesn't support linux hardlinks)!
#
# Ideally, the script is run on a regular basis e.g. as a cron job.
# It can be run manually in addition to that.
#
# The script is for one way backups, e.g. to external hard drives.
# To sync directories across hosts, I use Syncthing.
#
# There are three kinds of groups of directories with different backup strategies:
# "data", "synced" and "unsynced".
#
# 1) "synced" directories are meant for personal data like documents etc. that I want on every host.
#    They are expected to be synced across hosts via a sync tool, not this backup script.
#    Backups will be incremental, i.e. the target will contain subdirectories per timestamp.
#    Since there is an external sync, there will be *no* subdirectories per host.
#    It is recommended to perform a sync before running this backup script, so that the directories
#    contain the most recent data. Otherwise only the present data will be in the snapshot and other
#    newer/older snapshots may contain other data. This may be confusing (but not cause data loss).
#    The data doesn't really need to be on every host, however
#    deletions will be synced to the target (for the created snapshot).
# 2) "unsynced" directories are meant for other per-host data that I want to backup.
#    There will be one subdirectory per host.
#    Backups will be incremental, i.e. the target will contain subdirectories per timestamp.
#    Deletions will be synced to the target (for the created snapshot).
# 3) "data" directories are meant for bigger data collections like personal photos, that I *don't*
#    want on every host (for disk space reasons).
#    Backups will *not* be incremental, i.e. the target will *not* contain subdirectories
#    per timestamp.
#    Also, there will be no subdirectories per host, as this should generate a central backup of
#    data from different hosts - so hosts should use a common structure for this to work.
#    Deletions will not be synced to the target. However data could be overwritten!
#
#
# In the default synced directory the file 'README.md' explains order and file structure.
# The file 'tidy.txt' on external hard drives is outdated.


#############################
# CONFIGURATION STARTS HERE #
#############################

# Directory in which to create the backups:
# -----------------------------------------

# This can be a local diretory path or a remote one that rsync supports (like ssh - `host:/path`)

# $DEST can be set via command line argument (--dest)
DEFAULT_DEST="verliernix:/mnt/zfs/flipsi" # default value

# File structure that will be created in $DEST:
# /data/foo
# /data/bar
# /backup/synced/latest
# /backup/synced/$DATE/foo
# /backup/synced/$DATE/bar
# /backup/unsynced/$HOSTNAME/latest
# /backup/unsynced/$HOSTNAME/$DATE/baz
# /backup/unsynced/$HOSTNAME/$DATE/quz


# Directories that should be backed up:
# -------------------------------------

# Backups will be created in the `synced` directory.
# If they don't exist, they will just be skipped.
# Note the "/./" to limit relative paths, see https://unix.stackexchange.com/a/321224/119362
SYNCED_SOURCES=(
    "$HOME/./Sync"
    "$HOME/./work/code-intelligence"
    "$HOME/./work/reply"
)

# Backups will be created in the `unsynced` directory under the hostname.
# If they don't exist, they will just be skipped.
# Note the "/./" to limit relative paths, see https://unix.stackexchange.com/a/321224/119362
UNSYNCED_SOURCES=(
    "$HOME/./.azure"
    "$HOME/./.babashka"
    "$HOME/./.backup.log"
    "$HOME/./.config"
    "$HOME/./.cargo"
    "$HOME/./.clojure"
    "$HOME/./.gnupg"
    "$HOME/./.netrc"
    "$HOME/./.local/share/mail"
    "$HOME/./.password-store"
    "$HOME/./.ssh"
    "$HOME/./bin"
    "$HOME/./opt"
    "$HOME/./os"
    "$HOME/./projects" # subdirs should be in a remove git repository, but hey
    "$HOME/./public-html"
    "$HOME/./work-projects/code-intelligence"
    "$HOME/./work-projects/reply"
)

# Backups will be added to the `data` backup directory.
# If they don't exist, they will just be skipped.
# Note the "/./" to limit relative paths, see https://unix.stackexchange.com/a/321224/119362
DATA_SOURCES=(
    "$HOME/./img-photo"
    "$HOME/./music-misc"
    "$HOME/./music-soundtracks"
    "$HOME/./music-vid"
    "$HOME/./recording"
    "$HOME/./snd-audiobooks"
    "$HOME/./vid"
    "$HOME/./vid-misc"
    "$HOME/./vid-movie"
)

###########################
# CONFIGURATION ENDS HERE #
###########################

DATE_HUMAN_READABLE="$(date)"
DATE="$(date +%Y-%m-%d-%H-%M-%S)"
TIME=$(date +%s)

LOG_DIR="$HOME/.backup.log"
LOG_FILE="$LOG_DIR/backup.$DATE.log"

HOSTNAME=$(hostname)

# RSYNC_OPTS must never contain "--delete", only RSYNC_OPTS_INCREMENTAL should!
RSYNC_OPTS=(
    "--verbose"
    "--archive"
    "--mkpath"
    "--one-file-system"
    "--relative"
    "--exclude='.cache'"
)
RSYNC_OPTS_INCREMENTAL=("${RSYNC_OPTS[@]}")
RSYNC_OPTS_INCREMENTAL+=(
    "--delete"
)


function _print_help_msg()
{
    cat <<-EOF
Create backup of some configured files in $HOME.

Usage: $(basename "$0") [--dest DEST]

If no backup destination is given, $DEFAULT_DEST is used as a default.
EOF
}


function _backup_data()
{
    things=("$@")
    # Make sure to set $BACKUP_DATA_DIR env, too! (can't accept additional args)

    RSYNC_DEST="$BACKUP_DATA_DIR"

    for thing in "${things[@]}"; do
        echo -e "\nBacking up $thing ..."
        if ! test -e "$thing"; then
            echo "WARNING: $thing not found! Skipping."
        else
            echo "rsync ${RSYNC_OPTS[*]} $thing $RSYNC_DEST"
            env rsync "${RSYNC_OPTS[@]}" "$thing" "$RSYNC_DEST"
        fi
    done
}


function _create_backup_increment()
{
    things=("$@")
    # Make sure to set $BACKUP_LIST env, too! (can't accept additional args)

    RSYNC_DEST="$BACKUP_LIST/$DATE"
    LATEST="$BACKUP_LIST/latest"

    # 1. Determine 'latest' backup to link to

    LOCAL_RSYNC_OPTS=("${RSYNC_OPTS_INCREMENTAL[@]}") # copy to not overwrite RSYNC_OPTS_INCREMENTAL
    if [[ "$IS_REMOTE_DEST" == 'TRUE' ]]; then
        if ssh "$DEST_HOST" test -d "$LATEST"; then
            # shellcheck disable=SC2029
            LATEST_RELATIVE="../$(ssh "$DEST_HOST" "readlink '$LATEST'")"
            LOCAL_RSYNC_OPTS+=("--link-dest=$LATEST_RELATIVE")
            # --link-dest arguments have to be relative to the destination dir
        fi
    else
        if [ -d "$LATEST" ]; then
            LATEST_RELATIVE="../$(readlink "$LATEST")"
            LOCAL_RSYNC_OPTS+=("--link-dest=$LATEST_RELATIVE")
            # --link-dest arguments have to be relative to the destination dir
        fi
    fi

    # 2. Run rsync

    for thing in "${things[@]}"; do
        echo -e "\nBacking up $thing ..."
        if ! test -e "$thing"; then
            echo "WARNING: $thing not found! Skipping."
        else
            if [[ "$IS_REMOTE_DEST" == 'TRUE' ]]; then
                echo "rsync ${LOCAL_RSYNC_OPTS[*]} $thing $DEST_HOST:$RSYNC_DEST"
                env rsync "${LOCAL_RSYNC_OPTS[@]}" "$thing" "$DEST_HOST:$RSYNC_DEST"
            else
                echo "rsync ${LOCAL_RSYNC_OPTS[*]} $thing $RSYNC_DEST"
                env rsync "${LOCAL_RSYNC_OPTS[@]}" "$thing" "$RSYNC_DEST"
            fi
        fi
    done

    # 3. Set 'latest' link

    if [[ "$IS_REMOTE_DEST" == 'TRUE' ]]; then
        # shellcheck disable=SC2029
        ssh "$DEST_HOST" "rm -f '$LATEST' && ln -s --relative '$RSYNC_DEST' '$LATEST'"
    else
        rm -f "$LATEST"
        ln -s --relative "$RSYNC_DEST" "$LATEST"
    fi
}


function _check_destination()
{
    if [[ "${DEST}" == *:* ]] ; then # remote destination
        IS_REMOTE_DEST='TRUE'
        DEST_HOST=$(echo "$DEST" | cut -d ":" -f 1)
        DEST_DIR=$(echo "$DEST" | cut -d ":" -f 2)
    else
        DEST_DIR="$DEST"
    fi

    if [[ "$IS_REMOTE_DEST" == 'TRUE' ]]; then
        echo "Testing connection to remote host $DEST_HOST ..."
        if ssh "$DEST_HOST" exit; then
            echo "Connection successful."
            echo "It is recommended to reuse SSH connections (ControlMaster, ControlPersist etc.) as the scripts connects to the destination multiple times."
        else
            echo "FATAL ERROR: Could not establish connection to $DEST_HOST"
            echo "Make sure SSH access (or similar) works (ideally without password prompt)."
            exit 1
        fi
    else
        # if ! mountpoint -q "$DEST"; then    # test if mounted ($DEST as mountpoint)
        if ! test -d "$DEST"; then    # ($DEST as subdir of mountpoint)
            echo "FATAL ERROR: Backup destination directory $DEST not found!"
            exit 1
        fi
    fi
}


function _main()
{
    echo "Started backup at $DATE_HUMAN_READABLE"

    _check_destination

    # SYNCED_SOURCES
    BACKUP_LIST="$DEST_DIR/backup/synced"
    _create_backup_increment "${SYNCED_SOURCES[@]}"

    # UNSYNCED_SOURCES
    BACKUP_LIST="$DEST_DIR/backup/unsynced/$HOSTNAME"
    _create_backup_increment "${UNSYNCED_SOURCES[@]}"

    # DATA_SOURCES
    BACKUP_DATA_DIR="$DEST/data"
    _backup_data "${DATA_SOURCES[@]}"

    DATE_FINISHED="$(date)"
    TIME_FINISHED=$(date +%s)
    EXECUTION_TIME=$((TIME_FINISHED - TIME))

    echo # newline
    echo "Finished backup at $DATE_FINISHED within $EXECUTION_TIME seconds."
    echo "This log has been written to $LOG_FILE"
}


if [[ "${1-default}" = "--help" ]]; then
    _print_help_msg
    exit
elif [[ "${1-default}" = "--dest" ]]; then
    DEST="${2-$DEFAULT_DEST}"
else
    DEST="$DEFAULT_DEST"
fi

DEST="${DEST%/}" # remove trailing slash if present

mkdir -p "$LOG_DIR"
touch "$LOG_FILE"
exec > >(tee "$LOG_FILE") 2>&1 # log to both, stdout/stderr and log file
_main
